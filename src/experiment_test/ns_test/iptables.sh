#!/bin/sh

echo "Testing few firewall rules implemented via iptables: "
echo "===>userspace tool set working with NetFilter module in kernel: "
echo "- allow all traffic on loopback port as applications use it in the system"
echo "- allow all traffic pertaining or related to already established connections"
echo "- accept SSH (port 22) connection"
echo "- accept HTTP (port 80) connection"
echo "- deny all other traffic: log type of traffic for all denied traffic"
#
# Invoke the script within a namespace
#> sudo ip netns add red && sudo ip netns exec red sh iptables.sh

# -L lists; -v verbose output
iptables -L -v
# -A|--append: appends; -m conntrack match on connection state; 
# -j action {ACCEPT|REJECT|DROP|LOG|LOGNDROP}
# Stages: {INPUT|FORWARD|LOGNFROP|OUTPUT} 
iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
# -p protocol; --dport further match on destination port
iptables -A INPUT -p tcp --dport www -j ACCEPT
# -I INPUT index: insert rule in INPUT section as rule # index
iptables -I INPUT 2 -p tcp --dport ssh -j ACCEPT
# -i Interface_Name: match on interface
sudo iptables -I INPUT 1 -i lo -j ACCEPT
# -m limit match on "few" packets. "Few" elaborated by --limit; 
# -j LOG --log-prefix add prefix to every log; --log-level level used for syslog
iptables -I INPUT 5 -m limit --limit 5/min -j LOG --log-prefix "iptables denied: " --log-level 7
# NAT: Between public network and private network
# -t|--table: support NAT between Public veth-public vs Private veth-priv interface
# set up IP FORWARDing and MASQUERADEing: 
iptables --table nat --append POSTROUTING --out-interface eth-public -j MASQUERADE
iptables --append FORWARD --in-interface eth-priv -j ACCEPT
# iptables-save -c: saves rules including packet byte/counters to file.
iptables-save -c > ~/tmp/iptables.rules
# Edit the iptables.rules file: it has options minus the iptables command
########################################################################################
# # Generated by iptables-save v1.4.21 on Thu Nov 27 21:34:32 2014
# *nat
# :PREROUTING ACCEPT [0:0]
# :INPUT ACCEPT [0:0]
# :OUTPUT ACCEPT [0:0]
# :POSTROUTING ACCEPT [0:0]
# [0:0] -A POSTROUTING -o eth-public -j MASQUERADE
# COMMIT
# # Completed on Thu Nov 27 21:34:32 2014
# # Generated by iptables-save v1.4.21 on Thu Nov 27 21:34:32 2014
# *filter
# :INPUT ACCEPT [0:0]
# :FORWARD ACCEPT [0:0]
# :OUTPUT ACCEPT [0:0]
# :LOGANDDROP - [0:0]
# [0:0] -A INPUT -i lo -j ACCEPT
# [0:0] -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
# [0:0] -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT
# [0:0] -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT
# [0:0] -A INPUT -j LOGANDDROP
# [0:0] -A FORWARD -i eth-priv -j ACCEPT
# [0:0] -A LOGANDDROP -p tcp -m limit --limit 5/min -j LOG --log-prefix "Denied TCP: " --log-level 7
# [0:0] -A LOGANDDROP -p udp -m limit --limit 5/min -j LOG --log-prefix "Denied UDP: " --log-level 7
# [0:0] -A LOGANDDROP -p icmp -m limit --limit 5/min -j LOG --log-prefix "Denied ICMP: " --log-level 7
# [0:0] -A LOGANDDROP -j DROP
# COMMIT
# # Completed on Thu Nov 27 21:34:32 2014
########################################################################################
# Another example: created by docker installation
# Generated by iptables-save v1.4.21 on Tue Dec  2 14:55:01 2014
# *nat
# :PREROUTING ACCEPT [59826:16346254]
# :INPUT ACCEPT [7024:1009964]
# :OUTPUT ACCEPT [47576:3451442]
# :POSTROUTING ACCEPT [47545:3448817]
# :DOCKER - [0:0]
# -A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER
# -A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER
# -A POSTROUTING -s 172.17.0.0/16 ! -d 172.17.0.0/16 -j MASQUERADE
# COMMIT
# # Completed on Tue Dec  2 14:55:01 2014
# # Generated by iptables-save v1.4.21 on Tue Dec  2 14:55:01 2014
# *filter
# :INPUT ACCEPT [884302:1060772067]
# :FORWARD ACCEPT [0:0]
# :OUTPUT ACCEPT [559183:93949317]
# -A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
# -A FORWARD -i docker0 ! -o docker0 -j ACCEPT
# -A FORWARD -i docker0 -o docker0 -j ACCEPT
# COMMIT
# Completed on Tue Dec  2 14:55:01 2014
########################################################################################
# -D deletes: in this case delete an INPUT rule # 2
iptables -D INPUT 2
# restore to point when rules where saved
iptables-restore < ~/tmp/iptables.rules
########################################################################################
#
# 1. /etc/network/interfaces: For all interfaces
#    "post-down iptables-save > /etc/iptables.rules" saves rules for use on next boot
#    pre-up iptables-restore < /etc/iptables.rules
#    post-down iptables-save > /etc/iptables.rules
# 2. /etc/network/interfaces: For specific interfaces
#    auto eth0
#    iface eth0 inet dhcp
#      pre-up iptables-restore < /etc/iptables.rules
#      post-down iptables-save > /etc/iptables.rules && \
#                iptables-restore < /etc/iptables.downrules 
# 3. if-{pre-up|post-down}.d 
# /etc/network/if-pre-up.d/iptablesload.sh:
# ---
# #!/bin/sh
# iptables-restore < /etc/iptables.rules
# exit 0
# ---
# /etc/network/if-post-down.d/iptablessave.sh
# #!/bin/sh
# iptables-save -c > /etc/iptables.rules
# if [ -f /etc/iptables.downrules ]; then
#    iptables-restore < /etc/iptables.downrules
# fi
# exit 0
# ---
# One can also use the iptables-persistent package
# iptables-persistent - boot-time loader for iptables rules
#
########################################################################################
